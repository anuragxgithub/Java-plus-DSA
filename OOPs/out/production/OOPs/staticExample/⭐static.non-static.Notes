variable or method can be static or non-static.

Static:

> When a member (variable or method) is declared as static, it belongs to the class itself rather than to any
  specific instance/object of the class.
> Static members are shared among all instances of the class. There is only one copy of a static member in memory,
  regardless of how many objects of that class are created.
> Static variables are initialized only once, when the class is loaded into memory, and their values are shared
  among all instances.
> Static methods can be called directly on the class itself, without the need to create an instance of the class.
> Static members can be accessed using the class name followed by the member name by convention (showing that it is
  independent from objects) e.g., ClassName.staticMember.  (other members are accessed by obj. name)
> Static members can be accessed before any object of its class is created.


Non-Static (Instance):

Non-static members are associated with individual instances (objects) of a class.
> Each object has its own copy of non-static variables, and changes made to those variables are specific to that
  particular object.
> Non-static methods can access both static and non-static members of a class.
> To access non-static members, you need to create an instance of the class and use that instance to access the
  member (e.g., instanceName.nonStaticMember).

Here are some important points to remember:

> If any method is not static then it is non-static.
> Static members can be accessed directly using the class name, while non-static members require an
  instance of the class.
> Static members are loaded into memory when the class is loaded, while non-static members are created when
  an object is instantiated.
> Static members are useful for defining constants, utility methods, or shared resources, while non-static
  members represent the state and behavior specific to each object.